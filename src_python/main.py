# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt6 UI code generator 6.9.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import cv2, time
import qtgrapher, arduino_logger
import subprocess


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.StartBtn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.StartBtn.setGeometry(QtCore.QRect(20, 170, 181, 121))
        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(True)
        self.StartBtn.setFont(font)
        self.StartBtn.setObjectName("StartBtn")
        self.lineEdit = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(22, 30, 181, 61))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.lineEdit.setFont(font)
        self.lineEdit.setInputMask("")
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(240, 30, 501, 61))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.GraphBtn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.GraphBtn.setGeometry(QtCore.QRect(20, 300, 181, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.GraphBtn.setFont(font)
        self.GraphBtn.setObjectName("GraphBtn")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(220, 130, 541, 401))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("../../../../Images/632470_screenshots_20191022113843_1.jpg"))
        self.label.setWordWrap(False)
        self.label.setOpenExternalLinks(False)
        self.label.setObjectName("label")
        self.comboBox = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(20, 100, 181, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 29))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.refresh_cameras()
        self.add_functions()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Sensitive Photographer"))
        self.StartBtn.setText(_translate("MainWindow", "Запуск"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "COM-порт"))
        self.lineEdit_2.setPlaceholderText(_translate("MainWindow", "Название"))
        self.GraphBtn.setText(_translate("MainWindow", "График"))
        self.comboBox.setPlaceholderText(_translate("MainWindow", "Микроскоп"))

    def add_functions(self):
        self.StartBtn.clicked.connect(self.start)
        self.GraphBtn.clicked.connect(self.graph)
        
    def start(self):
        self.label.setText("Сервер запущен")
        subprocess.Popen([sys.executable, "arduino_logger.py", self.lineEdit.text(), self.lineEdit_2.text()])

    def graph(self):
        print("График создан")
        subprocess.Popen([sys.executable, "qtgrapher.py", self.lineEdit_2.text(), "1"])
        self.label.setText("График создан")

    def get_available_cameras(self, max_to_test=10):
        available_cameras = []
        for i in range(max_to_test):
            try:
                cap = cv2.VideoCapture(i)
                if cap.isOpened():
                    ret, _ = cap.read()
                    if ret:
                        available_cameras.append(i)
                    cap.release()
            except:
                continue
        return available_cameras

    def refresh_cameras(self):
        self.comboBox.clear()
        available_cameras = self.get_available_cameras()
        
        if not available_cameras:
            self.comboBox.addItem("Не найдено доступных камер")
            self.comboBox.setEnabled(False)
        else:
            for cam_idx in available_cameras:
                self.comboBox.addItem(f"Камера {cam_idx}", cam_idx)
    

if __name__ == "__main__":
    import sys, os
    
    # Получаем путь к директории, где находится main.py
    application_path = os.path.dirname(os.path.abspath(__file__))

    # Добавляем эту директорию в путь поиска модулей
    if application_path not in sys.path:
        sys.path.append(application_path)


    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
